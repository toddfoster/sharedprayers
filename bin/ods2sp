#!/usr/bin/env python3
import calendar
import json
from pathlib import Path
import os
import argparse
from dateutil.easter import *
from dateutil.relativedelta import *
from datetime import *
from pyexcel_ods3 import get_data

"""ods2sp : ods to SharedPrayers
Produce liturgies for a particular year based on the liturgical
calendar from the Book of Common Prayer (1979) for Sundays and
Major Feasts, using a libreoffce Calc file (.ods) for templates.

Required data sources are:
 - calcdates.json: info on how to calculate the calendar dates
   of Sundays & major feasts
 - bcpcollects.json: source of proper titles for Sundays/feasts
 - templates file (ods): source of templates

Usage
  ods2sp [year] [flags...]
  year = numeric year (e.g., 2022 will generate liturgies from
         Advent 1 (28 Nov 2021) through Proper 29/CTK (20 Nov 2022).
         Defaults to current year according to the liturgical
         calendar.

Flags
 - --dry-run : don't write anything to disk
 - --force -f : force generate liturgies even for dates already past
 - --templates -t dir : .ods file with templates
 - --output -o dir : directory for output
 - --day -d day : code for liturgical day to generate
 - --lectionary: generate a 'lectionary' of lessons on a single page
 - --test : run tests on this script
 - --help -h : command-line options
 - --usage : more information

Templates
 Templates are contained in a LibreOffice Calc file. Template will
 be chosen from a sheet named after the desired year. In that sheet,
 a row with the liturgical day code in the sixth column will be
 selected as the chosen template. It is suggested a "default" row
 be provided in case the desired day code is not found. Columns 1-4
 are ignored. Column 5 is for tags delimited by commas. Columns 7
 and 8 have special meaning, being used to
 populate the "rite:" and "bcppage:" fields of the page headers,
 respectively. Columns that begin with "#" are passed through without
 changes. Columns that begin with ";" are ignored as comments.
 Certain codes will take the next column as a hymn specification
 (or blank). Columns can have multiple lines of input, which will
 be treated independently, as if each were a new column.

The liturgies output, as origianlly implemented, are used to
populate the website https://www.sharedprayers.net using
the static website generator hugo (https://www.gohugo.io).
"""

copyright = """Copyright 2022 Todd Foster

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

# Important data files
# https://github.com/toddfoster/sharedprayers/tree/master/data
CALCDATESFILE = "data/calcdates.json"
COLLECTSFILE = "data/bcpcollects.json"
TEMPLATESFILE = "liturgyplans.ods"
LFF2018FILE = "data/lff2018.json"

# Default directories
OUTPUTDIR = "content/archive"

####################################################
####################################################
"""
argparse:
https://docs.python.org/3/library/argparse.html#module-argparse
https://docs.python.org/3/howto/argparse.html
"""
parser = argparse.ArgumentParser()
parser.add_argument(
    "year", help="Year to generate (beginning from Advent 1 of previous calendar year)."
)
parser.add_argument(
    "--dry-run", action="store_true", help="don't write anything to disk"
)
parser.add_argument(
    "-f",
    "--force",
    action="store_true",
    help="force generate liturgies even for dates already past",
)
parser.add_argument(
    "-d",
    "--day",
    type=str,
    help="specific day code to generate (e.g., first-sunday-of-advent)",
)
parser.add_argument("--usage", action="store_true", help="more usage information")
parser.add_argument("--copyright", action="store_true", help="show copyright info")
parser.add_argument("--test", action="store_true", help="run tests on script")
parser.add_argument("--templates", type=str, help="templates file")
parser.add_argument("--output", type=str, help="output directory")
parser.add_argument("--debug", action="store_true", help="show debugging info")
parser.add_argument(
    "--lectionary", action="store_true", help="generate lessons for the whole year"
)

args = parser.parse_args()

if args.usage:
    print(__doc__)
    sys.exit(0)

if args.copyright:
    print(copyright)
    sys.exit(0)

if args.templates:
    TEMPLATESDIR = args.templates
if args.output:
    OUTPUTDIR = args.output
year = args.year
DEBUG = args.debug

####################################################
####################################################

calcdates = []
with open(CALCDATESFILE, "r", encoding="utf-8") as f:
    data = f.read()
    calcdates = json.loads(data)

collects = []
with open(COLLECTSFILE, "r", encoding="utf-8") as f:
    data = f.read()
    collects = json.loads(data)
with open(LFF2018FILE, "r", encoding="utf-8") as f:
    data = f.read()
    lff = json.loads(data)
    for l in lff:
        l["day"] = l["slug"]
        l["collect"] = l["rite2_collect"]
        collects.append(l)

# TODO: check for successful load or throw error
templates = get_data(TEMPLATESFILE)


def straight_quotes(text):
    single_open = "\u2018"
    single_close = "\u2019"
    double_open = "\u201C"
    double_close = "\u201D"
    text = text.replace(single_open, "'")
    text = text.replace(single_close, "'")
    text = text.replace(double_open, '"')
    text = text.replace(double_close, '"')
    return text


def christmas_sunday(year):
    """Calculate the Sunday of or following Christmas.

    Examples:
    >>> christmas_sunday(2022)
    datetime.date(2022, 12, 25)
    >>> christmas_sunday(2023)
    datetime.date(2023, 12, 31)
    """
    xmas = date(year, 12, 25)
    if xmas.weekday() == calendar.SUNDAY:
        return xmas
    return date(year, 12, 26) + relativedelta(weekday=calendar.SUNDAY)


def sundayafterepiphany(year):
    """Calculate the Sunday following Epiphany

    Examples:
    >>> sundayafterepiphany(2022)
    datetime.date(2022, 1, 9)
    >>> sundayafterepiphany(2023)
    datetime.date(2023, 1, 8)
    """
    return date(year, 1, 7) + relativedelta(weekday=calendar.SUNDAY)


def getrecord(data, day):
    for i in data:
        if i["day"] == day:
            return i


def liturgyseason(the_date):
    """Return the liturgical season for the given date.

    Examples:
    >>> liturgyseason(date(2022, 1, 1))
    'christmas'
    >>> liturgyseason(date(2022, 1, 5))
    'christmas'
    >>> liturgyseason(date(2022, 1, 6))
    'epiphany'
    >>> liturgyseason(date(2022, 1, 9))
    'epiphany'
    >>> liturgyseason(date(2022, 2, 18))
    'epiphany'
    >>> liturgyseason(date(2022, 3, 1))
    'epiphany'
    >>> liturgyseason(date(2022, 3, 2))
    'lent'
    >>> liturgyseason(date(2022, 4, 16))
    'lent'
    >>> liturgyseason(date(2022, 4, 17))
    'easter'
    >>> liturgyseason(date(2022, 6, 5))
    'pentecost'
    >>> liturgyseason(date(2022, 11, 26))
    'pentecost'
    >>> liturgyseason(date(2022, 11, 27))
    'advent'
    >>> liturgyseason(date(2022, 12, 24))
    'advent'
    """
    the_year = the_date.year

    if the_date < liturgydate("the-epiphany", the_year):
        return "christmas"

    if the_date < liturgydate("ash-wednesday", the_year):
        return "epiphany"

    if the_date < easter(the_year):
        return "lent"

    if the_date < liturgydate("day-of-pentecost-principal-service", the_year):
        return "easter"

    if the_date < liturgydate("first-sunday-of-advent", the_year + 1):
        return "pentecost"

    if the_date < date(the_year, 12, 25):
        return "advent"

    return "christmas"


def liturgydate(day, year):
    """Calculate the calendar date for a liturgy in a liturgical year.

    Liturgical year begins on Advent 1 (fourth Sunday before Christmas).

    Examples:
    >>> liturgydate('first-sunday-of-advent', 2023)
    datetime.date(2022, 11, 27)
    >>> liturgydate('first-sunday-of-advent', 2024)
    datetime.date(2023, 12, 3)
    """
    year = int(year)

    # special case: thanksgiving-day on fourth Thursday in November
    if day == "thanksgiving-day":
        return date(year, 11, 22) + relativedelta(weekday=calendar.THURSDAY)

    calculator = getrecord(calcdates, day)
    if not calculator:
        raise Exception("Calculation data for day " + day + " not found.")
    method = calculator["relative"]
    value = calculator["value"]

    # methods = ["xmas-last", "date", "eiphany1", "easter", "xmas-next"]
    if method == "xmas-last":
        return christmas_sunday(year - 1) + relativedelta(days=int(value))

    if method == "xmas-next":
        return christmas_sunday(year) + relativedelta(days=int(value))

    if method == "epiphany1":
        return sundayafterepiphany(year) + relativedelta(days=int(value))

    if method == "easter":
        return easter(year) + relativedelta(days=int(value))

    if method == "date":
        when = date.fromisoformat(value)
        when = date(year, when.month, when.day)
        # correct for static dates that occur between advent 1 & turn of year
        if when >= liturgydate("first-sunday-of-advent", year + 1):
            when = date(year - 1, when.month, when.day)
        return when

    raise Exception("Invalid method encountered: " + method)


def lectionarytitle(day):
    collect = getrecord(collects, day)
    if not collect:
        raise Exception("Title or day " + day + " not found.")
    return collect["title"]


def lectionaryyear(year):
    # Working backwards, 1900 would be year a!
    year = int(year)
    if year < 1900:
        raise Exception(
            "Invalid year " + str(year) + ": only 1900 and later are supported."
        )
    year = (year - 1900) % 3
    if year == 0:
        return "a"
    if year == 1:
        return "b"
    return "c"


def write_lessons(day, year):
    todo = ["palm-sunday-liturgy-of-the-palms", "easter-day-the-great-vigil"]

    no_second_reading = [
        "easter-day-the-great-vigil",
        "monday-in-easter-week",
        "tuesday-in-easter-week",
        "wednesday-in-easter-week",
        "thursday-in-easter-week",
        "friday-in-easter-week",
        "saturday-in-easter-week",
    ]

    result = "##### pb\n"
    lessons_date = liturgydate(day, year)
    result += (
        "## " + lectionarytitle(day) + " - " + lessons_date.strftime("%d %B %Y") + "\n"
    )

    if day in todo:
        result += "## READINGS TO BE GENERATED MANUALLY\n\n"
        return result
    result += '{{% lesson "first" "' + day + '" /%}}\n'
    result += '{{% lesson "psalm" "' + day + '" /%}}\n'
    if not day in no_second_reading:
        result += '{{% lesson "second" "' + day + '" /%}}\n'
    result += '{{% lesson "gospel" "' + day + '" /%}}\n'
    result += "\n"
    return result


def major_liturgies(year):
    """
    Return list of major liturgies corresponding to a liturgical year.

    Obeys args.force to omit/include liturgies before date.today().
    """
    year = int(year)
    liturgies = []

    for d in calcdates:
        dday = d["day"]
        ddate = liturgydate(dday, year)

        # skip past dates?
        if not args.force:
            if ddate < date.today():
                continue

        # skip second-sunday-after-christmas
        # if it occurs after the-epiphany
        if dday == "second-sunday-after-christmas":
            if ddate > date(year, 1, 6):
                continue

        # skip epiphanies that happen on or after
        # last-sunday-after-the-epiphany
        # exploiting a fortuitous difference to not skip
        # last-sunday-after-THE-epiphany
        if dday.find("after-epiphany") >= 0:
            if ddate >= liturgydate("last-sunday-after-the-epiphany", year):
                continue

        # skip propers that happen on or before trinity-sunday
        if dday.find("proper") >= 0:
            if ddate <= liturgydate("trinity-sunday", year):
                continue

        liturgies.append(dday)

    # Add thanksgiving-day, which is not included in calcdates.json
    thanksgivingdate = liturgydate("thanksgiving-day", year)
    if thanksgivingdate > date.today() or args.force:
        liturgies.append("thanksgiving-day")
    return liturgies


def generate_lectionary(year, day):
    """
    Generate lectionary (lessons for each liturgy) for Sundays and major feasts.
    """
    print("Writing header for lessons for " + str(year))
    with open(OUTPUTDIR + "/" + str(year) + "/lectionary.md", "w") as t:
        t.write("---\n")
        t.write("title: Lectionary (" + str(year) + ")\n")
        t.write("date: " + str(liturgydate("first-sunday-of-advent", year)) + "\n")
        t.write("lectionaryyear: " + lectionaryyear(year) + "\n")
        t.write("---\n")

        for liturgy in major_liturgies(year):
            if day and day != liturgy:
                continue

            if args.dry_run:
                print("DRY RUN: Not writing liturgy for " + liturgy + ": " + str(year))
                continue

            print("Writing lessons for " + liturgy + ": " + str(year))
            t.write(write_lessons(liturgy, year))


def lectionary_year_from_date(d):
    year = d.year
    if liturgyseason(d) == "advent":
        year = year + 1
    elif liturgyseason(d) == "christmas" and d.month == 12:
        year = year + 1
    return lectionaryyear(year)


COL_DATE = 0
COL_TAGS = 4
COL_CODE = 5
COL_RITE = COL_CODE + 1
COL_BCPP = COL_RITE + 1
COL_BEGN = COL_BCPP + 1
HOLY_DAYS_DIR = "layouts/shortcodes/holydays/"


def unpack_liturgy(row):
    if DEBUG:
        print("DEBUG: unpack_liturgy " + str(row))

    day = row[COL_CODE]
    date = row[COL_DATE]

    # Handle holy days not in json
    title = ""
    try:
        title = lectionarytitle(day)
    except Exception as e:
        with open(HOLY_DAYS_DIR + day + "/title", "r", encoding="utf-8") as title_file:
            title = title_file.read().strip()

    rite = row[COL_RITE]
    if rite:
        title = rite + " for " + title

    result = "---\n"
    result += 'title: "' + title + '"\n'
    result += "date: " + str(date) + "\n"
    result += "lectionaryyear: " + lectionary_year_from_date(date) + "\n"
    result += "proper: " + day + "\n"
    result += "season: " + liturgyseason(date) + "\n"
    result += "weekday: " + date.strftime("%A").lower() + "\n"

    if rite:
        result += "rite: " + rite + "\n"
    bcpp = row[COL_BCPP]
    if bcpp:
        result += "bcppage: " + bcpp + "\n"

    tagstring = row[COL_TAGS].strip()
    if tagstring:
        tags = tagstring.split(",")
        tags = [s.strip() for s in tags]
        if len(tags) > 0:
            result += "tags:\n"
            for t in tags:
                result += "- " + t + "\n"

    result += "---\n"

    closed_codes = ["lesson", "he/eucharisticprayer/b", "he/eucharisticprayer/a"]
    hymn_optional_codes = [
        "he/entrance",
        "he/sequence",
        "he/offertory",
        "he/communion",
        "he/processional",
        "he/hymn",
    ]
    maybe_hymn = ""

    for col in range(COL_BCPP + 1, len(row)):
        entries = straight_quotes(row[col]).split("\n")
        for entry in entries:
            if maybe_hymn:
                if DEBUG:
                    print("Found maybe hymn: " + maybe_hymn + "(" + entry + ")")
                if entry:
                    entry = maybe_hymn + ' "' + entry + '"'
                else:
                    entry = maybe_hymn
                maybe_hymn = "found"

            # Check for empty cell
            if not entry:
                continue

            # Check for comment (";"): skip column
            if entry.startswith(";"):
                continue

            # Check for heading ("#"): print column as-is
            if entry.startswith("#"):
                result += entry + "\n"
                continue

            # Check whether to look for a hymn in the next column
            if maybe_hymn != "found":
                if entry.startswith("hymn"):
                    maybe_hymn = entry
                else:
                    for code in hymn_optional_codes:
                        if code in entry:
                            maybe_hymn = entry
            if maybe_hymn and maybe_hymn != "found":
                continue

            # Add entry with or without a closer
            needs_closer = False
            for code in closed_codes:
                needs_closer = needs_closer or code in entry
            needs_closer = needs_closer and not entry.endswith(" /")
            if needs_closer:
                result += "{{% " + entry.strip() + " /%}}\n"
            else:
                result += "{{% " + entry.strip() + " %}}\n"
            maybe_hymn = ""
    return result


def convert_spreadsheet(year, target_day, force_rewrite_history):
    """
    Generate liturgies for all entries in spreadsheet except "default"
    and possibly excepting dates already passed.
    """
    year = str(year)
    target = OUTPUTDIR + "/" + year
    if not args.dry_run:
        os.makedirs(target, exist_ok=True)

    filenames = []

    found_day = False
    sheet = templates[str(year)]
    for row in sheet:
        if DEBUG:
            print("row=" + str(row))

        # skip empty rows
        if len(row) < COL_BEGN:
            continue

        # skip first row
        if row[COL_CODE] == "Code":
            continue

        # skip rows without valid dates
        rowdate = date.today()
        try:
            rowdate = date.fromisoformat(str(row[COL_DATE]))
        except Exception as e:
            continue

        # skip non-selected days
        if target_day and row[COL_CODE] != target_day:
            continue
        found_day = True

        # skip past dates?
        if not force_rewrite_history and rowdate < date.today():
            continue

        filename = row[COL_CODE]
        if filename in filenames:
            alt = ord("a")
            filename = filename + "-" + chr(alt)
            while filename in filenames:
                alt += 1
                filename = filename[0:-2] + "-" + chr(alt)
            print("Alt filename: " + filename)
        filenames.append(filename)

        # don't write on dry_run
        if args.dry_run:
            print("DRY RUN: Not writing liturgy for " + filename + ": " + row[COL_DATE])
            continue

        print("Writing liturgy for " + filename + ": " + str(row[COL_DATE]))
        with open(target + "/" + filename + ".md", "w") as t:
            t.write(unpack_liturgy(row))
            t.write("\n")
    if not found_day:
        print("WARNING: could not locate requested day " + target_day)


if args.test:
    import doctest

    failures, tests = doctest.testmod(verbose=True)
    assert failures == 0
    sys.exit(0)

if args.lectionary and not args.dry_run:
    generate_lectionary(args.year, args.day)
else:
    convert_spreadsheet(args.year, args.day, args.force)
